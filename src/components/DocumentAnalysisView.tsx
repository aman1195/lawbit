
import { useState } from "react";
import { Loader2, X, Download } from "lucide-react";
import { Button } from "@/components/ui/button";
import RiskIndicator from "./RiskIndicator";
import { RiskLevel } from "@/types";

interface DocumentAnalysisViewProps {
  document: {
    id: string;
    title: string;
    date: string;
    status: "analyzing" | "completed" | "error";
    riskLevel?: RiskLevel;
    riskScore?: number;
    findings?: string[];
    recommendations?: string;
    progress?: number;
    error?: string;
  };
  onClose: () => void;
}

const DocumentAnalysisView = ({ document, onClose }: DocumentAnalysisViewProps) => {
  const [isDownloading, setIsDownloading] = useState(false);
  
  const handleDownload = () => {
    setIsDownloading(true);
    
    try {
      // Create content for download
      let content = `# ${document.title}\n`;
      content += `Date: ${document.date}\n\n`;
      
      if (document.status === "completed" && document.riskLevel) {
        content += `## Risk Assessment\n`;
        content += `Risk Level: ${document.riskLevel.toUpperCase()}\n`;
        content += `Risk Score: ${document.riskScore}/100\n\n`;
        
        if (document.findings && document.findings.length > 0) {
          content += `## Key Findings\n`;
          document.findings.forEach(finding => {
            content += `- ${finding}\n`;
          });
          content += '\n';
        }
        
        if (document.recommendations) {
          content += `## Recommendations\n`;
          content += `${document.recommendations}\n\n`;
        }
      } else if (document.status === "error" && document.error) {
        content += `## Error\n`;
        content += `${document.error}\n\n`;
      }
      
      content += `Generated by RiskScan on ${document.date}`;
      
      // Create and trigger download
      const element = document.createElement("a");
      const file = new Blob([content], {type: 'text/plain'});
      element.href = URL.createObjectURL(file);
      element.download = `${document.title.replace(/\s+/g, '_')}_analysis.txt`;
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
    } catch (error) {
      console.error("Error downloading analysis:", error);
    } finally {
      setIsDownloading(false);
    }
  };
  
  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-background rounded-lg shadow-lg w-full max-w-3xl max-h-[90vh] flex flex-col">
        <div className="p-4 border-b flex justify-between items-center">
          <h2 className="text-xl font-semibold">{document.title}</h2>
          <Button variant="ghost" size="icon" onClick={onClose}>
            <X className="h-4 w-4" />
          </Button>
        </div>
        
        <div className="overflow-auto p-6 flex-grow">
          {document.status === "analyzing" && (
            <div className="flex flex-col items-center justify-center h-64">
              <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
              <p className="text-muted-foreground">Analysis in progress...</p>
              <div className="w-full max-w-md mt-4">
                <div className="h-2 w-full bg-secondary rounded-full overflow-hidden">
                  <div
                    className="h-full bg-primary rounded-full transition-all duration-500"
                    style={{ width: `${document.progress || 0}%` }}
                  ></div>
                </div>
                <p className="text-right text-xs text-muted-foreground mt-1">
                  {document.progress || 0}% complete
                </p>
              </div>
            </div>
          )}
          
          {document.status === "error" && document.error && (
            <div className="p-6 flex flex-col items-center">
              <div className="rounded-full bg-destructive/10 p-3 mb-4">
                <X className="h-6 w-6 text-destructive" />
              </div>
              <h3 className="text-xl font-medium mb-2">Analysis Failed</h3>
              <p className="text-muted-foreground text-center max-w-md mb-6">
                {document.error}
              </p>
              <Button variant="outline" onClick={onClose}>
                Close
              </Button>
            </div>
          )}
          
          {document.status === "completed" && document.riskLevel && (
            <div className="space-y-8">
              <div className="p-4 border rounded-lg bg-muted/30">
                <h3 className="text-lg font-medium mb-4">Risk Assessment</h3>
                <RiskIndicator level={document.riskLevel} score={document.riskScore} />
              </div>
              
              {document.findings && document.findings.length > 0 && (
                <div className="p-4 border rounded-lg bg-muted/30">
                  <h3 className="text-lg font-medium mb-4">Key Findings</h3>
                  <ul className="space-y-2">
                    {document.findings.map((finding, index) => (
                      <li key={index} className="flex items-start">
                        <span className="inline-flex items-center justify-center rounded-full bg-primary/10 text-primary w-5 h-5 text-xs font-medium mr-2 mt-0.5">
                          {index + 1}
                        </span>
                        <span>{finding}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
              
              {document.recommendations && (
                <div className="p-4 border rounded-lg bg-muted/30">
                  <h3 className="text-lg font-medium mb-4">Recommendations</h3>
                  <p className="whitespace-pre-line">{document.recommendations}</p>
                </div>
              )}
            </div>
          )}
        </div>
        
        <div className="p-4 border-t flex justify-between">
          {document.status === "completed" && (
            <Button variant="outline" onClick={handleDownload} disabled={isDownloading}>
              {isDownloading ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Downloading...
                </>
              ) : (
                <>
                  <Download className="h-4 w-4 mr-2" />
                  Download Analysis
                </>
              )}
            </Button>
          )}
          <div className="ml-auto">
            <Button variant={document.status === "completed" ? "ghost" : "default"} onClick={onClose}>
              {document.status === "completed" ? "Close" : "Cancel"}
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DocumentAnalysisView;
